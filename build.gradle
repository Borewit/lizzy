plugins {
    id 'java-library'
    id 'maven-publish'
    id 'application'
    id 'signing'
}

apply plugin: 'maven-publish'

repositories {
    // Access the Central Repository with Gradle via HTTPS
    // Ref: https://central.sonatype.org/consume/consume-gradle/
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

application {
    mainClassName = 'christophedelory.lizzy.Transcode'
}

dependencies {
    implementation 'args4j:args4j:2.33'
    implementation 'org.codehaus.castor:castor-core:1.4.1'
    implementation 'org.codehaus.castor:castor-xml:1.4.1'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'asm:asm:3.3.1'
    implementation 'commons-beanutils:commons-beanutils-core:1.8.3'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'commons-jexl:commons-jexl:1.0'
    implementation 'org.dom4j:dom4j:2.1.4'
    // https://mvnrepository.com/artifact/xml-apis/xml-apis
    implementation 'xml-apis:xml-apis:1.4.01'
    // https://mvnrepository.com/artifact/com.sun.activation/javax.activation
    implementation 'com.sun.activation:javax.activation:1.2.0'

    // JAXB API only
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    //JAXB RI, Jakarta XML Binding
    runtimeOnly 'com.sun.xml.bind:jaxb-impl:2.3.8'

    implementation files('ext/ffmpeg/ffmpeg-java.jar')
    implementation files('ext/ffmpeg/jna.jar')

    // JUnit Jupiter using Gradle's native JUnit Platform
    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.platform:junit-platform-reporting'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    duplicatesStrategy = 'include'
}

java {
    withSourcesJar()
    withJavadocJar()
}


group = 'io.github.borewit'
version = '1.1.4-SNAPSHOT'
description = 'Lizzy'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {

        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'Lizzy'
                description = 'Multimedia playlist parser, supporting a wide range of playlist file formats.'
                url = 'https://github.com/Borewit/lizzy'
                licenses {
                    license {
                        name = 'BSD license'
                        url = 'https://github.com/Borewit/lizzy/blob/main/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Borewit'
                        name = 'Borewit'
                        timezone = 'Europe/Amsterdam'
                        url = 'https://github.com/Borewit'
                    }
                }
                contributors {
                    contributor {
                        name = 'Borewit'
                        timezone = 'Europe/Amsterdam'
                        url = 'https://github.com/Borewit'
                    }
                    contributor {
                        name = 'Christophe Delory'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Borewit/lizzy.git'
                    url = 'https://github.com/Borewit/lizzy'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
    options.addStringOption("Xmaxwarns", "1")
}
